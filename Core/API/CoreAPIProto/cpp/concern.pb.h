// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concern.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_concern_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_concern_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_concern_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_concern_2eproto {
  static const ::uint32_t offsets[];
};
namespace core {
namespace api {
namespace proto {
class RenderableConcern;
struct RenderableConcernDefaultTypeInternal;
extern RenderableConcernDefaultTypeInternal _RenderableConcern_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template <>
::core::api::proto::RenderableConcern* Arena::CreateMaybeMessage<::core::api::proto::RenderableConcern>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace core {
namespace api {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class RenderableConcern final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.api.proto.RenderableConcern) */ {
 public:
  inline RenderableConcern() : RenderableConcern(nullptr) {}
  ~RenderableConcern() override;
  explicit PROTOBUF_CONSTEXPR RenderableConcern(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderableConcern(const RenderableConcern& from);
  RenderableConcern(RenderableConcern&& from) noexcept
    : RenderableConcern() {
    *this = ::std::move(from);
  }

  inline RenderableConcern& operator=(const RenderableConcern& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderableConcern& operator=(RenderableConcern&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RenderableConcern& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderableConcern* internal_default_instance() {
    return reinterpret_cast<const RenderableConcern*>(
               &_RenderableConcern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RenderableConcern& a, RenderableConcern& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderableConcern* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderableConcern* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderableConcern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderableConcern>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RenderableConcern& from);
  void MergeFrom(const RenderableConcern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenderableConcern* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "core.api.proto.RenderableConcern";
  }
  protected:
  explicit RenderableConcern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcernIdFieldNumber = 1,
  };
  // optional uint64 concern_id = 1;
  bool has_concern_id() const;
  void clear_concern_id() ;
  ::uint64_t concern_id() const;
  void set_concern_id(::uint64_t value);

  private:
  ::uint64_t _internal_concern_id() const;
  void _internal_set_concern_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:core.api.proto.RenderableConcern)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t concern_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_concern_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RenderableConcern

// optional uint64 concern_id = 1;
inline bool RenderableConcern::has_concern_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RenderableConcern::clear_concern_id() {
  _impl_.concern_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t RenderableConcern::concern_id() const {
  // @@protoc_insertion_point(field_get:core.api.proto.RenderableConcern.concern_id)
  return _internal_concern_id();
}
inline void RenderableConcern::set_concern_id(::uint64_t value) {
  _internal_set_concern_id(value);
  // @@protoc_insertion_point(field_set:core.api.proto.RenderableConcern.concern_id)
}
inline ::uint64_t RenderableConcern::_internal_concern_id() const {
  return _impl_.concern_id_;
}
inline void RenderableConcern::_internal_set_concern_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.concern_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace core


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_concern_2eproto_2epb_2eh
