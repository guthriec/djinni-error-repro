// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sources_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sources_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sources_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sources_2eproto {
  static const ::uint32_t offsets[];
};
namespace core {
namespace api {
namespace proto {
class ListSourceRequest;
struct ListSourceRequestDefaultTypeInternal;
extern ListSourceRequestDefaultTypeInternal _ListSourceRequest_default_instance_;
class ListSourceResponse;
struct ListSourceResponseDefaultTypeInternal;
extern ListSourceResponseDefaultTypeInternal _ListSourceResponse_default_instance_;
class RenderableSource;
struct RenderableSourceDefaultTypeInternal;
extern RenderableSourceDefaultTypeInternal _RenderableSource_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template <>
::core::api::proto::ListSourceRequest* Arena::CreateMaybeMessage<::core::api::proto::ListSourceRequest>(Arena*);
template <>
::core::api::proto::ListSourceResponse* Arena::CreateMaybeMessage<::core::api::proto::ListSourceResponse>(Arena*);
template <>
::core::api::proto::RenderableSource* Arena::CreateMaybeMessage<::core::api::proto::RenderableSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace core {
namespace api {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class ListSourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.api.proto.ListSourceRequest) */ {
 public:
  inline ListSourceRequest() : ListSourceRequest(nullptr) {}
  ~ListSourceRequest() override;
  explicit PROTOBUF_CONSTEXPR ListSourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSourceRequest(const ListSourceRequest& from);
  ListSourceRequest(ListSourceRequest&& from) noexcept
    : ListSourceRequest() {
    *this = ::std::move(from);
  }

  inline ListSourceRequest& operator=(const ListSourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSourceRequest& operator=(ListSourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ListSourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSourceRequest* internal_default_instance() {
    return reinterpret_cast<const ListSourceRequest*>(
               &_ListSourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListSourceRequest& a, ListSourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSourceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSourceRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListSourceRequest& from);
  void MergeFrom(const ListSourceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListSourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "core.api.proto.ListSourceRequest";
  }
  protected:
  explicit ListSourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:core.api.proto.ListSourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sources_2eproto;
};// -------------------------------------------------------------------

class ListSourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.api.proto.ListSourceResponse) */ {
 public:
  inline ListSourceResponse() : ListSourceResponse(nullptr) {}
  ~ListSourceResponse() override;
  explicit PROTOBUF_CONSTEXPR ListSourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListSourceResponse(const ListSourceResponse& from);
  ListSourceResponse(ListSourceResponse&& from) noexcept
    : ListSourceResponse() {
    *this = ::std::move(from);
  }

  inline ListSourceResponse& operator=(const ListSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSourceResponse& operator=(ListSourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ListSourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListSourceResponse* internal_default_instance() {
    return reinterpret_cast<const ListSourceResponse*>(
               &_ListSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListSourceResponse& a, ListSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSourceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListSourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListSourceResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListSourceResponse& from);
  void MergeFrom(const ListSourceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListSourceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "core.api.proto.ListSourceResponse";
  }
  protected:
  explicit ListSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // repeated .core.api.proto.RenderableSource source = 1;
  int source_size() const;
  private:
  int _internal_source_size() const;

  public:
  void clear_source() ;
  ::core::api::proto::RenderableSource* mutable_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::api::proto::RenderableSource >*
      mutable_source();
  private:
  const ::core::api::proto::RenderableSource& _internal_source(int index) const;
  ::core::api::proto::RenderableSource* _internal_add_source();
  public:
  const ::core::api::proto::RenderableSource& source(int index) const;
  ::core::api::proto::RenderableSource* add_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::api::proto::RenderableSource >&
      source() const;
  // @@protoc_insertion_point(class_scope:core.api.proto.ListSourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::api::proto::RenderableSource > source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sources_2eproto;
};// -------------------------------------------------------------------

class RenderableSource final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.api.proto.RenderableSource) */ {
 public:
  inline RenderableSource() : RenderableSource(nullptr) {}
  ~RenderableSource() override;
  explicit PROTOBUF_CONSTEXPR RenderableSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderableSource(const RenderableSource& from);
  RenderableSource(RenderableSource&& from) noexcept
    : RenderableSource() {
    *this = ::std::move(from);
  }

  inline RenderableSource& operator=(const RenderableSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderableSource& operator=(RenderableSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RenderableSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderableSource* internal_default_instance() {
    return reinterpret_cast<const RenderableSource*>(
               &_RenderableSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RenderableSource& a, RenderableSource& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderableSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderableSource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderableSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderableSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RenderableSource& from);
  void MergeFrom(const RenderableSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RenderableSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "core.api.proto.RenderableSource";
  }
  protected:
  explicit RenderableSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kSourceIconUrlFieldNumber = 2,
  };
  // optional string source_name = 1;
  bool has_source_name() const;
  void clear_source_name() ;
  const std::string& source_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_name(Arg_&& arg, Args_... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* ptr);

  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(
      const std::string& value);
  std::string* _internal_mutable_source_name();

  public:
  // optional string source_icon_url = 2;
  bool has_source_icon_url() const;
  void clear_source_icon_url() ;
  const std::string& source_icon_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_icon_url(Arg_&& arg, Args_... args);
  std::string* mutable_source_icon_url();
  PROTOBUF_NODISCARD std::string* release_source_icon_url();
  void set_allocated_source_icon_url(std::string* ptr);

  private:
  const std::string& _internal_source_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_icon_url(
      const std::string& value);
  std::string* _internal_mutable_source_icon_url();

  public:
  // @@protoc_insertion_point(class_scope:core.api.proto.RenderableSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_icon_url_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sources_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ListSourceRequest

// -------------------------------------------------------------------

// ListSourceResponse

// repeated .core.api.proto.RenderableSource source = 1;
inline int ListSourceResponse::_internal_source_size() const {
  return _impl_.source_.size();
}
inline int ListSourceResponse::source_size() const {
  return _internal_source_size();
}
inline void ListSourceResponse::clear_source() {
  _impl_.source_.Clear();
}
inline ::core::api::proto::RenderableSource* ListSourceResponse::mutable_source(int index) {
  // @@protoc_insertion_point(field_mutable:core.api.proto.ListSourceResponse.source)
  return _impl_.source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::api::proto::RenderableSource >*
ListSourceResponse::mutable_source() {
  // @@protoc_insertion_point(field_mutable_list:core.api.proto.ListSourceResponse.source)
  return &_impl_.source_;
}
inline const ::core::api::proto::RenderableSource& ListSourceResponse::_internal_source(int index) const {
  return _impl_.source_.Get(index);
}
inline const ::core::api::proto::RenderableSource& ListSourceResponse::source(int index) const {
  // @@protoc_insertion_point(field_get:core.api.proto.ListSourceResponse.source)
  return _internal_source(index);
}
inline ::core::api::proto::RenderableSource* ListSourceResponse::_internal_add_source() {
  return _impl_.source_.Add();
}
inline ::core::api::proto::RenderableSource* ListSourceResponse::add_source() {
  ::core::api::proto::RenderableSource* _add = _internal_add_source();
  // @@protoc_insertion_point(field_add:core.api.proto.ListSourceResponse.source)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::core::api::proto::RenderableSource >&
ListSourceResponse::source() const {
  // @@protoc_insertion_point(field_list:core.api.proto.ListSourceResponse.source)
  return _impl_.source_;
}

// -------------------------------------------------------------------

// RenderableSource

// optional string source_name = 1;
inline bool RenderableSource::has_source_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RenderableSource::clear_source_name() {
  _impl_.source_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RenderableSource::source_name() const {
  // @@protoc_insertion_point(field_get:core.api.proto.RenderableSource.source_name)
  return _internal_source_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RenderableSource::set_source_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:core.api.proto.RenderableSource.source_name)
}
inline std::string* RenderableSource::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:core.api.proto.RenderableSource.source_name)
  return _s;
}
inline const std::string& RenderableSource::_internal_source_name() const {
  return _impl_.source_name_.Get();
}
inline void RenderableSource::_internal_set_source_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RenderableSource::_internal_mutable_source_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_name_.Mutable( GetArenaForAllocation());
}
inline std::string* RenderableSource::release_source_name() {
  // @@protoc_insertion_point(field_release:core.api.proto.RenderableSource.source_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RenderableSource::set_allocated_source_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_name_.IsDefault()) {
          _impl_.source_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.api.proto.RenderableSource.source_name)
}

// optional string source_icon_url = 2;
inline bool RenderableSource::has_source_icon_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RenderableSource::clear_source_icon_url() {
  _impl_.source_icon_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RenderableSource::source_icon_url() const {
  // @@protoc_insertion_point(field_get:core.api.proto.RenderableSource.source_icon_url)
  return _internal_source_icon_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RenderableSource::set_source_icon_url(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_icon_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:core.api.proto.RenderableSource.source_icon_url)
}
inline std::string* RenderableSource::mutable_source_icon_url() {
  std::string* _s = _internal_mutable_source_icon_url();
  // @@protoc_insertion_point(field_mutable:core.api.proto.RenderableSource.source_icon_url)
  return _s;
}
inline const std::string& RenderableSource::_internal_source_icon_url() const {
  return _impl_.source_icon_url_.Get();
}
inline void RenderableSource::_internal_set_source_icon_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.source_icon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* RenderableSource::_internal_mutable_source_icon_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.source_icon_url_.Mutable( GetArenaForAllocation());
}
inline std::string* RenderableSource::release_source_icon_url() {
  // @@protoc_insertion_point(field_release:core.api.proto.RenderableSource.source_icon_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.source_icon_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_icon_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RenderableSource::set_allocated_source_icon_url(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.source_icon_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_icon_url_.IsDefault()) {
          _impl_.source_icon_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.api.proto.RenderableSource.source_icon_url)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace core


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sources_2eproto_2epb_2eh
