// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inbox_service.proto

#include "inbox_service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace core {
namespace api {
namespace proto {
PROTOBUF_CONSTEXPR InboxSegmentUpdate::InboxSegmentUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.concern_id_to_insert_)*/ {}

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.inbox_segment_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.parent_concern_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_index_)*/ 0u

  , /*decltype(_impl_.total_available_concerns_)*/ 0u

  , /*decltype(_impl_.async_fetch_in_progress_)*/ false
} {}
struct InboxSegmentUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InboxSegmentUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InboxSegmentUpdateDefaultTypeInternal() {}
  union {
    InboxSegmentUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InboxSegmentUpdateDefaultTypeInternal _InboxSegmentUpdate_default_instance_;
PROTOBUF_CONSTEXPR GetInboxSegmentRequest::GetInboxSegmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.current_segment_inserted_concern_ids_)*/ {}

  , /*decltype(_impl_.parent_concern_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.previous_inbox_segment_id_)*/ ::uint64_t{0u}
} {}
struct GetInboxSegmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInboxSegmentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInboxSegmentRequestDefaultTypeInternal() {}
  union {
    GetInboxSegmentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInboxSegmentRequestDefaultTypeInternal _GetInboxSegmentRequest_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace core
namespace core {
namespace api {
namespace proto {
// ===================================================================

class InboxSegmentUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<InboxSegmentUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InboxSegmentUpdate, _impl_._has_bits_);
  static void set_has_inbox_segment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_concern_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_available_concerns(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_async_fetch_in_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

InboxSegmentUpdate::InboxSegmentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core.api.proto.InboxSegmentUpdate)
}
InboxSegmentUpdate::InboxSegmentUpdate(const InboxSegmentUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InboxSegmentUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concern_id_to_insert_) { from._impl_.concern_id_to_insert_ }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.inbox_segment_id_) {}

    , decltype(_impl_.parent_concern_id_) {}

    , decltype(_impl_.start_index_) {}

    , decltype(_impl_.total_available_concerns_) {}

    , decltype(_impl_.async_fetch_in_progress_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.inbox_segment_id_, &from._impl_.inbox_segment_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.async_fetch_in_progress_) -
    reinterpret_cast<char*>(&_impl_.inbox_segment_id_)) + sizeof(_impl_.async_fetch_in_progress_));
  // @@protoc_insertion_point(copy_constructor:core.api.proto.InboxSegmentUpdate)
}

inline void InboxSegmentUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concern_id_to_insert_) { arena }

    , decltype(_impl_.title_) {}

    , decltype(_impl_.inbox_segment_id_) { ::uint64_t{0u} }

    , decltype(_impl_.parent_concern_id_) { ::uint64_t{0u} }

    , decltype(_impl_.start_index_) { 0u }

    , decltype(_impl_.total_available_concerns_) { 0u }

    , decltype(_impl_.async_fetch_in_progress_) { false }

  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InboxSegmentUpdate::~InboxSegmentUpdate() {
  // @@protoc_insertion_point(destructor:core.api.proto.InboxSegmentUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InboxSegmentUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.concern_id_to_insert_.~RepeatedField();
  _impl_.title_.Destroy();
}

void InboxSegmentUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InboxSegmentUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:core.api.proto.InboxSegmentUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concern_id_to_insert_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.title_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.inbox_segment_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.async_fetch_in_progress_) -
        reinterpret_cast<char*>(&_impl_.inbox_segment_id_)) + sizeof(_impl_.async_fetch_in_progress_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InboxSegmentUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 inbox_segment_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_inbox_segment_id(&has_bits);
          _impl_.inbox_segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 parent_concern_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_parent_concern_id(&has_bits);
          _impl_.parent_concern_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 start_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_start_index(&has_bits);
          _impl_.start_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 total_available_concerns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_total_available_concerns(&has_bits);
          _impl_.total_available_concerns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 concern_id_to_insert = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_concern_id_to_insert(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_concern_id_to_insert(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool async_fetch_in_progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_async_fetch_in_progress(&has_bits);
          _impl_.async_fetch_in_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InboxSegmentUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.api.proto.InboxSegmentUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 inbox_segment_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_inbox_segment_id(), target);
  }

  // optional uint64 parent_concern_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_parent_concern_id(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_title();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional uint32 start_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_start_index(), target);
  }

  // optional uint32 total_available_concerns = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_total_available_concerns(), target);
  }

  // repeated uint64 concern_id_to_insert = 6;
  for (int i = 0, n = this->_internal_concern_id_to_insert_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_concern_id_to_insert(i), target);
  }

  // optional bool async_fetch_in_progress = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_async_fetch_in_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.api.proto.InboxSegmentUpdate)
  return target;
}

::size_t InboxSegmentUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.api.proto.InboxSegmentUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 concern_id_to_insert = 6;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(this->_impl_.concern_id_to_insert_)
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_concern_id_to_insert_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string title = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_title());
    }

    // optional uint64 inbox_segment_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_inbox_segment_id());
    }

    // optional uint64 parent_concern_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_parent_concern_id());
    }

    // optional uint32 start_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_start_index());
    }

    // optional uint32 total_available_concerns = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_total_available_concerns());
    }

    // optional bool async_fetch_in_progress = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InboxSegmentUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InboxSegmentUpdate*>(
      &from));
}

void InboxSegmentUpdate::MergeFrom(const InboxSegmentUpdate& from) {
  InboxSegmentUpdate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:core.api.proto.InboxSegmentUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.concern_id_to_insert_.MergeFrom(from._impl_.concern_id_to_insert_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.inbox_segment_id_ = from._impl_.inbox_segment_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.parent_concern_id_ = from._impl_.parent_concern_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_index_ = from._impl_.start_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.total_available_concerns_ = from._impl_.total_available_concerns_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.async_fetch_in_progress_ = from._impl_.async_fetch_in_progress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InboxSegmentUpdate::CopyFrom(const InboxSegmentUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.api.proto.InboxSegmentUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InboxSegmentUpdate::IsInitialized() const {
  return true;
}

void InboxSegmentUpdate::InternalSwap(InboxSegmentUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.concern_id_to_insert_.InternalSwap(&other->_impl_.concern_id_to_insert_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InboxSegmentUpdate, _impl_.async_fetch_in_progress_)
      + sizeof(InboxSegmentUpdate::_impl_.async_fetch_in_progress_)
      - PROTOBUF_FIELD_OFFSET(InboxSegmentUpdate, _impl_.inbox_segment_id_)>(
          reinterpret_cast<char*>(&_impl_.inbox_segment_id_),
          reinterpret_cast<char*>(&other->_impl_.inbox_segment_id_));
}

std::string InboxSegmentUpdate::GetTypeName() const {
  return "core.api.proto.InboxSegmentUpdate";
}

// ===================================================================

class GetInboxSegmentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInboxSegmentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetInboxSegmentRequest, _impl_._has_bits_);
  static void set_has_parent_concern_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_inbox_segment_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetInboxSegmentRequest::GetInboxSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core.api.proto.GetInboxSegmentRequest)
}
GetInboxSegmentRequest::GetInboxSegmentRequest(const GetInboxSegmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetInboxSegmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_segment_inserted_concern_ids_) { from._impl_.current_segment_inserted_concern_ids_ }

    , decltype(_impl_.parent_concern_id_) {}

    , decltype(_impl_.previous_inbox_segment_id_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.parent_concern_id_, &from._impl_.parent_concern_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.previous_inbox_segment_id_) -
    reinterpret_cast<char*>(&_impl_.parent_concern_id_)) + sizeof(_impl_.previous_inbox_segment_id_));
  // @@protoc_insertion_point(copy_constructor:core.api.proto.GetInboxSegmentRequest)
}

inline void GetInboxSegmentRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.current_segment_inserted_concern_ids_) { arena }

    , decltype(_impl_.parent_concern_id_) { ::uint64_t{0u} }

    , decltype(_impl_.previous_inbox_segment_id_) { ::uint64_t{0u} }

  };
}

GetInboxSegmentRequest::~GetInboxSegmentRequest() {
  // @@protoc_insertion_point(destructor:core.api.proto.GetInboxSegmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInboxSegmentRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_segment_inserted_concern_ids_.~RepeatedField();
}

void GetInboxSegmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInboxSegmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:core.api.proto.GetInboxSegmentRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_segment_inserted_concern_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.parent_concern_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.previous_inbox_segment_id_) -
        reinterpret_cast<char*>(&_impl_.parent_concern_id_)) + sizeof(_impl_.previous_inbox_segment_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetInboxSegmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 parent_concern_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_parent_concern_id(&has_bits);
          _impl_.parent_concern_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint64 previous_inbox_segment_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_previous_inbox_segment_id(&has_bits);
          _impl_.previous_inbox_segment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 current_segment_inserted_concern_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_current_segment_inserted_concern_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_current_segment_inserted_concern_ids(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetInboxSegmentRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.api.proto.GetInboxSegmentRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 parent_concern_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_parent_concern_id(), target);
  }

  // optional uint64 previous_inbox_segment_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_previous_inbox_segment_id(), target);
  }

  // repeated uint64 current_segment_inserted_concern_ids = 3;
  for (int i = 0, n = this->_internal_current_segment_inserted_concern_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_current_segment_inserted_concern_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.api.proto.GetInboxSegmentRequest)
  return target;
}

::size_t GetInboxSegmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.api.proto.GetInboxSegmentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 current_segment_inserted_concern_ids = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(this->_impl_.current_segment_inserted_concern_ids_)
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_current_segment_inserted_concern_ids_size());
    ;
    total_size += tag_size + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 parent_concern_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_parent_concern_id());
    }

    // optional uint64 previous_inbox_segment_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_previous_inbox_segment_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInboxSegmentRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetInboxSegmentRequest*>(
      &from));
}

void GetInboxSegmentRequest::MergeFrom(const GetInboxSegmentRequest& from) {
  GetInboxSegmentRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:core.api.proto.GetInboxSegmentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.current_segment_inserted_concern_ids_.MergeFrom(from._impl_.current_segment_inserted_concern_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.parent_concern_id_ = from._impl_.parent_concern_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.previous_inbox_segment_id_ = from._impl_.previous_inbox_segment_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetInboxSegmentRequest::CopyFrom(const GetInboxSegmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.api.proto.GetInboxSegmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInboxSegmentRequest::IsInitialized() const {
  return true;
}

void GetInboxSegmentRequest::InternalSwap(GetInboxSegmentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.current_segment_inserted_concern_ids_.InternalSwap(&other->_impl_.current_segment_inserted_concern_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetInboxSegmentRequest, _impl_.previous_inbox_segment_id_)
      + sizeof(GetInboxSegmentRequest::_impl_.previous_inbox_segment_id_)
      - PROTOBUF_FIELD_OFFSET(GetInboxSegmentRequest, _impl_.parent_concern_id_)>(
          reinterpret_cast<char*>(&_impl_.parent_concern_id_),
          reinterpret_cast<char*>(&other->_impl_.parent_concern_id_));
}

std::string GetInboxSegmentRequest::GetTypeName() const {
  return "core.api.proto.GetInboxSegmentRequest";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::core::api::proto::InboxSegmentUpdate*
Arena::CreateMaybeMessage< ::core::api::proto::InboxSegmentUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::api::proto::InboxSegmentUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::core::api::proto::GetInboxSegmentRequest*
Arena::CreateMaybeMessage< ::core::api::proto::GetInboxSegmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::api::proto::GetInboxSegmentRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
