// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concern.proto

#include "concern.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace core {
namespace api {
namespace proto {
PROTOBUF_CONSTEXPR RenderableConcern::RenderableConcern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.concern_id_)*/ ::uint64_t{0u}
} {}
struct RenderableConcernDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderableConcernDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderableConcernDefaultTypeInternal() {}
  union {
    RenderableConcern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderableConcernDefaultTypeInternal _RenderableConcern_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace core
namespace core {
namespace api {
namespace proto {
// ===================================================================

class RenderableConcern::_Internal {
 public:
  using HasBits = decltype(std::declval<RenderableConcern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RenderableConcern, _impl_._has_bits_);
  static void set_has_concern_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RenderableConcern::RenderableConcern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core.api.proto.RenderableConcern)
}
RenderableConcern::RenderableConcern(const RenderableConcern& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:core.api.proto.RenderableConcern)
}

inline void RenderableConcern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concern_id_) { ::uint64_t{0u} }

  };
}

RenderableConcern::~RenderableConcern() {
  // @@protoc_insertion_point(destructor:core.api.proto.RenderableConcern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderableConcern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RenderableConcern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderableConcern::Clear() {
// @@protoc_insertion_point(message_clear_start:core.api.proto.RenderableConcern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concern_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RenderableConcern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 concern_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_concern_id(&has_bits);
          _impl_.concern_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RenderableConcern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.api.proto.RenderableConcern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 concern_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_concern_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.api.proto.RenderableConcern)
  return target;
}

::size_t RenderableConcern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.api.proto.RenderableConcern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 concern_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_concern_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderableConcern::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RenderableConcern*>(
      &from));
}

void RenderableConcern::MergeFrom(const RenderableConcern& from) {
  RenderableConcern* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:core.api.proto.RenderableConcern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_concern_id(from._internal_concern_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RenderableConcern::CopyFrom(const RenderableConcern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.api.proto.RenderableConcern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderableConcern::IsInitialized() const {
  return true;
}

void RenderableConcern::InternalSwap(RenderableConcern* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.concern_id_, other->_impl_.concern_id_);
}

std::string RenderableConcern::GetTypeName() const {
  return "core.api.proto.RenderableConcern";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::core::api::proto::RenderableConcern*
Arena::CreateMaybeMessage< ::core::api::proto::RenderableConcern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::api::proto::RenderableConcern >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
