// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inbox_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inbox_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_inbox_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_inbox_5fservice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inbox_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
namespace core {
namespace api {
namespace proto {
class GetInboxSegmentRequest;
struct GetInboxSegmentRequestDefaultTypeInternal;
extern GetInboxSegmentRequestDefaultTypeInternal _GetInboxSegmentRequest_default_instance_;
class InboxSegmentUpdate;
struct InboxSegmentUpdateDefaultTypeInternal;
extern InboxSegmentUpdateDefaultTypeInternal _InboxSegmentUpdate_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template <>
::core::api::proto::GetInboxSegmentRequest* Arena::CreateMaybeMessage<::core::api::proto::GetInboxSegmentRequest>(Arena*);
template <>
::core::api::proto::InboxSegmentUpdate* Arena::CreateMaybeMessage<::core::api::proto::InboxSegmentUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace core {
namespace api {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class InboxSegmentUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.api.proto.InboxSegmentUpdate) */ {
 public:
  inline InboxSegmentUpdate() : InboxSegmentUpdate(nullptr) {}
  ~InboxSegmentUpdate() override;
  explicit PROTOBUF_CONSTEXPR InboxSegmentUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InboxSegmentUpdate(const InboxSegmentUpdate& from);
  InboxSegmentUpdate(InboxSegmentUpdate&& from) noexcept
    : InboxSegmentUpdate() {
    *this = ::std::move(from);
  }

  inline InboxSegmentUpdate& operator=(const InboxSegmentUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline InboxSegmentUpdate& operator=(InboxSegmentUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InboxSegmentUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const InboxSegmentUpdate* internal_default_instance() {
    return reinterpret_cast<const InboxSegmentUpdate*>(
               &_InboxSegmentUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InboxSegmentUpdate& a, InboxSegmentUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(InboxSegmentUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InboxSegmentUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InboxSegmentUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InboxSegmentUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InboxSegmentUpdate& from);
  void MergeFrom(const InboxSegmentUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InboxSegmentUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "core.api.proto.InboxSegmentUpdate";
  }
  protected:
  explicit InboxSegmentUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcernIdToInsertFieldNumber = 6,
    kTitleFieldNumber = 3,
    kInboxSegmentIdFieldNumber = 1,
    kParentConcernIdFieldNumber = 2,
    kStartIndexFieldNumber = 4,
    kTotalAvailableConcernsFieldNumber = 5,
    kAsyncFetchInProgressFieldNumber = 7,
  };
  // repeated uint64 concern_id_to_insert = 6;
  int concern_id_to_insert_size() const;
  private:
  int _internal_concern_id_to_insert_size() const;

  public:
  void clear_concern_id_to_insert() ;
  ::uint64_t concern_id_to_insert(int index) const;
  void set_concern_id_to_insert(int index, ::uint64_t value);
  void add_concern_id_to_insert(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& concern_id_to_insert() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_concern_id_to_insert();

  private:
  ::uint64_t _internal_concern_id_to_insert(int index) const;
  void _internal_add_concern_id_to_insert(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_concern_id_to_insert() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_concern_id_to_insert();

  public:
  // optional string title = 3;
  bool has_title() const;
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // optional uint64 inbox_segment_id = 1;
  bool has_inbox_segment_id() const;
  void clear_inbox_segment_id() ;
  ::uint64_t inbox_segment_id() const;
  void set_inbox_segment_id(::uint64_t value);

  private:
  ::uint64_t _internal_inbox_segment_id() const;
  void _internal_set_inbox_segment_id(::uint64_t value);

  public:
  // optional uint64 parent_concern_id = 2;
  bool has_parent_concern_id() const;
  void clear_parent_concern_id() ;
  ::uint64_t parent_concern_id() const;
  void set_parent_concern_id(::uint64_t value);

  private:
  ::uint64_t _internal_parent_concern_id() const;
  void _internal_set_parent_concern_id(::uint64_t value);

  public:
  // optional uint32 start_index = 4;
  bool has_start_index() const;
  void clear_start_index() ;
  ::uint32_t start_index() const;
  void set_start_index(::uint32_t value);

  private:
  ::uint32_t _internal_start_index() const;
  void _internal_set_start_index(::uint32_t value);

  public:
  // optional uint32 total_available_concerns = 5;
  bool has_total_available_concerns() const;
  void clear_total_available_concerns() ;
  ::uint32_t total_available_concerns() const;
  void set_total_available_concerns(::uint32_t value);

  private:
  ::uint32_t _internal_total_available_concerns() const;
  void _internal_set_total_available_concerns(::uint32_t value);

  public:
  // optional bool async_fetch_in_progress = 7;
  bool has_async_fetch_in_progress() const;
  void clear_async_fetch_in_progress() ;
  bool async_fetch_in_progress() const;
  void set_async_fetch_in_progress(bool value);

  private:
  bool _internal_async_fetch_in_progress() const;
  void _internal_set_async_fetch_in_progress(bool value);

  public:
  // @@protoc_insertion_point(class_scope:core.api.proto.InboxSegmentUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> concern_id_to_insert_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::uint64_t inbox_segment_id_;
    ::uint64_t parent_concern_id_;
    ::uint32_t start_index_;
    ::uint32_t total_available_concerns_;
    bool async_fetch_in_progress_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inbox_5fservice_2eproto;
};// -------------------------------------------------------------------

class GetInboxSegmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:core.api.proto.GetInboxSegmentRequest) */ {
 public:
  inline GetInboxSegmentRequest() : GetInboxSegmentRequest(nullptr) {}
  ~GetInboxSegmentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInboxSegmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInboxSegmentRequest(const GetInboxSegmentRequest& from);
  GetInboxSegmentRequest(GetInboxSegmentRequest&& from) noexcept
    : GetInboxSegmentRequest() {
    *this = ::std::move(from);
  }

  inline GetInboxSegmentRequest& operator=(const GetInboxSegmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInboxSegmentRequest& operator=(GetInboxSegmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetInboxSegmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInboxSegmentRequest* internal_default_instance() {
    return reinterpret_cast<const GetInboxSegmentRequest*>(
               &_GetInboxSegmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetInboxSegmentRequest& a, GetInboxSegmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInboxSegmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInboxSegmentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInboxSegmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInboxSegmentRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetInboxSegmentRequest& from);
  void MergeFrom(const GetInboxSegmentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetInboxSegmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "core.api.proto.GetInboxSegmentRequest";
  }
  protected:
  explicit GetInboxSegmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentSegmentInsertedConcernIdsFieldNumber = 3,
    kParentConcernIdFieldNumber = 1,
    kPreviousInboxSegmentIdFieldNumber = 2,
  };
  // repeated uint64 current_segment_inserted_concern_ids = 3;
  int current_segment_inserted_concern_ids_size() const;
  private:
  int _internal_current_segment_inserted_concern_ids_size() const;

  public:
  void clear_current_segment_inserted_concern_ids() ;
  ::uint64_t current_segment_inserted_concern_ids(int index) const;
  void set_current_segment_inserted_concern_ids(int index, ::uint64_t value);
  void add_current_segment_inserted_concern_ids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& current_segment_inserted_concern_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_current_segment_inserted_concern_ids();

  private:
  ::uint64_t _internal_current_segment_inserted_concern_ids(int index) const;
  void _internal_add_current_segment_inserted_concern_ids(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_current_segment_inserted_concern_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_current_segment_inserted_concern_ids();

  public:
  // optional uint64 parent_concern_id = 1;
  bool has_parent_concern_id() const;
  void clear_parent_concern_id() ;
  ::uint64_t parent_concern_id() const;
  void set_parent_concern_id(::uint64_t value);

  private:
  ::uint64_t _internal_parent_concern_id() const;
  void _internal_set_parent_concern_id(::uint64_t value);

  public:
  // optional uint64 previous_inbox_segment_id = 2;
  bool has_previous_inbox_segment_id() const;
  void clear_previous_inbox_segment_id() ;
  ::uint64_t previous_inbox_segment_id() const;
  void set_previous_inbox_segment_id(::uint64_t value);

  private:
  ::uint64_t _internal_previous_inbox_segment_id() const;
  void _internal_set_previous_inbox_segment_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:core.api.proto.GetInboxSegmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> current_segment_inserted_concern_ids_;
    ::uint64_t parent_concern_id_;
    ::uint64_t previous_inbox_segment_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_inbox_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InboxSegmentUpdate

// optional uint64 inbox_segment_id = 1;
inline bool InboxSegmentUpdate::has_inbox_segment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InboxSegmentUpdate::clear_inbox_segment_id() {
  _impl_.inbox_segment_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t InboxSegmentUpdate::inbox_segment_id() const {
  // @@protoc_insertion_point(field_get:core.api.proto.InboxSegmentUpdate.inbox_segment_id)
  return _internal_inbox_segment_id();
}
inline void InboxSegmentUpdate::set_inbox_segment_id(::uint64_t value) {
  _internal_set_inbox_segment_id(value);
  // @@protoc_insertion_point(field_set:core.api.proto.InboxSegmentUpdate.inbox_segment_id)
}
inline ::uint64_t InboxSegmentUpdate::_internal_inbox_segment_id() const {
  return _impl_.inbox_segment_id_;
}
inline void InboxSegmentUpdate::_internal_set_inbox_segment_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.inbox_segment_id_ = value;
}

// optional uint64 parent_concern_id = 2;
inline bool InboxSegmentUpdate::has_parent_concern_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void InboxSegmentUpdate::clear_parent_concern_id() {
  _impl_.parent_concern_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t InboxSegmentUpdate::parent_concern_id() const {
  // @@protoc_insertion_point(field_get:core.api.proto.InboxSegmentUpdate.parent_concern_id)
  return _internal_parent_concern_id();
}
inline void InboxSegmentUpdate::set_parent_concern_id(::uint64_t value) {
  _internal_set_parent_concern_id(value);
  // @@protoc_insertion_point(field_set:core.api.proto.InboxSegmentUpdate.parent_concern_id)
}
inline ::uint64_t InboxSegmentUpdate::_internal_parent_concern_id() const {
  return _impl_.parent_concern_id_;
}
inline void InboxSegmentUpdate::_internal_set_parent_concern_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.parent_concern_id_ = value;
}

// optional string title = 3;
inline bool InboxSegmentUpdate::has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InboxSegmentUpdate::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InboxSegmentUpdate::title() const {
  // @@protoc_insertion_point(field_get:core.api.proto.InboxSegmentUpdate.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InboxSegmentUpdate::set_title(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:core.api.proto.InboxSegmentUpdate.title)
}
inline std::string* InboxSegmentUpdate::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:core.api.proto.InboxSegmentUpdate.title)
  return _s;
}
inline const std::string& InboxSegmentUpdate::_internal_title() const {
  return _impl_.title_.Get();
}
inline void InboxSegmentUpdate::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* InboxSegmentUpdate::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* InboxSegmentUpdate::release_title() {
  // @@protoc_insertion_point(field_release:core.api.proto.InboxSegmentUpdate.title)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.title_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InboxSegmentUpdate::set_allocated_title(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:core.api.proto.InboxSegmentUpdate.title)
}

// optional uint32 start_index = 4;
inline bool InboxSegmentUpdate::has_start_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void InboxSegmentUpdate::clear_start_index() {
  _impl_.start_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t InboxSegmentUpdate::start_index() const {
  // @@protoc_insertion_point(field_get:core.api.proto.InboxSegmentUpdate.start_index)
  return _internal_start_index();
}
inline void InboxSegmentUpdate::set_start_index(::uint32_t value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:core.api.proto.InboxSegmentUpdate.start_index)
}
inline ::uint32_t InboxSegmentUpdate::_internal_start_index() const {
  return _impl_.start_index_;
}
inline void InboxSegmentUpdate::_internal_set_start_index(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_index_ = value;
}

// optional uint32 total_available_concerns = 5;
inline bool InboxSegmentUpdate::has_total_available_concerns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void InboxSegmentUpdate::clear_total_available_concerns() {
  _impl_.total_available_concerns_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t InboxSegmentUpdate::total_available_concerns() const {
  // @@protoc_insertion_point(field_get:core.api.proto.InboxSegmentUpdate.total_available_concerns)
  return _internal_total_available_concerns();
}
inline void InboxSegmentUpdate::set_total_available_concerns(::uint32_t value) {
  _internal_set_total_available_concerns(value);
  // @@protoc_insertion_point(field_set:core.api.proto.InboxSegmentUpdate.total_available_concerns)
}
inline ::uint32_t InboxSegmentUpdate::_internal_total_available_concerns() const {
  return _impl_.total_available_concerns_;
}
inline void InboxSegmentUpdate::_internal_set_total_available_concerns(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.total_available_concerns_ = value;
}

// repeated uint64 concern_id_to_insert = 6;
inline int InboxSegmentUpdate::_internal_concern_id_to_insert_size() const {
  return _impl_.concern_id_to_insert_.size();
}
inline int InboxSegmentUpdate::concern_id_to_insert_size() const {
  return _internal_concern_id_to_insert_size();
}
inline void InboxSegmentUpdate::clear_concern_id_to_insert() {
  _impl_.concern_id_to_insert_.Clear();
}
inline ::uint64_t InboxSegmentUpdate::concern_id_to_insert(int index) const {
  // @@protoc_insertion_point(field_get:core.api.proto.InboxSegmentUpdate.concern_id_to_insert)
  return _internal_concern_id_to_insert(index);
}
inline void InboxSegmentUpdate::set_concern_id_to_insert(int index, ::uint64_t value) {
  _impl_.concern_id_to_insert_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.api.proto.InboxSegmentUpdate.concern_id_to_insert)
}
inline void InboxSegmentUpdate::add_concern_id_to_insert(::uint64_t value) {
  _internal_add_concern_id_to_insert(value);
  // @@protoc_insertion_point(field_add:core.api.proto.InboxSegmentUpdate.concern_id_to_insert)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& InboxSegmentUpdate::concern_id_to_insert() const {
  // @@protoc_insertion_point(field_list:core.api.proto.InboxSegmentUpdate.concern_id_to_insert)
  return _internal_concern_id_to_insert();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* InboxSegmentUpdate::mutable_concern_id_to_insert() {
  // @@protoc_insertion_point(field_mutable_list:core.api.proto.InboxSegmentUpdate.concern_id_to_insert)
  return _internal_mutable_concern_id_to_insert();
}

inline ::uint64_t InboxSegmentUpdate::_internal_concern_id_to_insert(int index) const {
  return _impl_.concern_id_to_insert_.Get(index);
}
inline void InboxSegmentUpdate::_internal_add_concern_id_to_insert(::uint64_t value) { _impl_.concern_id_to_insert_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& InboxSegmentUpdate::_internal_concern_id_to_insert() const {
  return _impl_.concern_id_to_insert_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* InboxSegmentUpdate::_internal_mutable_concern_id_to_insert() {
  return &_impl_.concern_id_to_insert_;
}

// optional bool async_fetch_in_progress = 7;
inline bool InboxSegmentUpdate::has_async_fetch_in_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void InboxSegmentUpdate::clear_async_fetch_in_progress() {
  _impl_.async_fetch_in_progress_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool InboxSegmentUpdate::async_fetch_in_progress() const {
  // @@protoc_insertion_point(field_get:core.api.proto.InboxSegmentUpdate.async_fetch_in_progress)
  return _internal_async_fetch_in_progress();
}
inline void InboxSegmentUpdate::set_async_fetch_in_progress(bool value) {
  _internal_set_async_fetch_in_progress(value);
  // @@protoc_insertion_point(field_set:core.api.proto.InboxSegmentUpdate.async_fetch_in_progress)
}
inline bool InboxSegmentUpdate::_internal_async_fetch_in_progress() const {
  return _impl_.async_fetch_in_progress_;
}
inline void InboxSegmentUpdate::_internal_set_async_fetch_in_progress(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.async_fetch_in_progress_ = value;
}

// -------------------------------------------------------------------

// GetInboxSegmentRequest

// optional uint64 parent_concern_id = 1;
inline bool GetInboxSegmentRequest::has_parent_concern_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetInboxSegmentRequest::clear_parent_concern_id() {
  _impl_.parent_concern_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t GetInboxSegmentRequest::parent_concern_id() const {
  // @@protoc_insertion_point(field_get:core.api.proto.GetInboxSegmentRequest.parent_concern_id)
  return _internal_parent_concern_id();
}
inline void GetInboxSegmentRequest::set_parent_concern_id(::uint64_t value) {
  _internal_set_parent_concern_id(value);
  // @@protoc_insertion_point(field_set:core.api.proto.GetInboxSegmentRequest.parent_concern_id)
}
inline ::uint64_t GetInboxSegmentRequest::_internal_parent_concern_id() const {
  return _impl_.parent_concern_id_;
}
inline void GetInboxSegmentRequest::_internal_set_parent_concern_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.parent_concern_id_ = value;
}

// optional uint64 previous_inbox_segment_id = 2;
inline bool GetInboxSegmentRequest::has_previous_inbox_segment_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetInboxSegmentRequest::clear_previous_inbox_segment_id() {
  _impl_.previous_inbox_segment_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t GetInboxSegmentRequest::previous_inbox_segment_id() const {
  // @@protoc_insertion_point(field_get:core.api.proto.GetInboxSegmentRequest.previous_inbox_segment_id)
  return _internal_previous_inbox_segment_id();
}
inline void GetInboxSegmentRequest::set_previous_inbox_segment_id(::uint64_t value) {
  _internal_set_previous_inbox_segment_id(value);
  // @@protoc_insertion_point(field_set:core.api.proto.GetInboxSegmentRequest.previous_inbox_segment_id)
}
inline ::uint64_t GetInboxSegmentRequest::_internal_previous_inbox_segment_id() const {
  return _impl_.previous_inbox_segment_id_;
}
inline void GetInboxSegmentRequest::_internal_set_previous_inbox_segment_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.previous_inbox_segment_id_ = value;
}

// repeated uint64 current_segment_inserted_concern_ids = 3;
inline int GetInboxSegmentRequest::_internal_current_segment_inserted_concern_ids_size() const {
  return _impl_.current_segment_inserted_concern_ids_.size();
}
inline int GetInboxSegmentRequest::current_segment_inserted_concern_ids_size() const {
  return _internal_current_segment_inserted_concern_ids_size();
}
inline void GetInboxSegmentRequest::clear_current_segment_inserted_concern_ids() {
  _impl_.current_segment_inserted_concern_ids_.Clear();
}
inline ::uint64_t GetInboxSegmentRequest::current_segment_inserted_concern_ids(int index) const {
  // @@protoc_insertion_point(field_get:core.api.proto.GetInboxSegmentRequest.current_segment_inserted_concern_ids)
  return _internal_current_segment_inserted_concern_ids(index);
}
inline void GetInboxSegmentRequest::set_current_segment_inserted_concern_ids(int index, ::uint64_t value) {
  _impl_.current_segment_inserted_concern_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:core.api.proto.GetInboxSegmentRequest.current_segment_inserted_concern_ids)
}
inline void GetInboxSegmentRequest::add_current_segment_inserted_concern_ids(::uint64_t value) {
  _internal_add_current_segment_inserted_concern_ids(value);
  // @@protoc_insertion_point(field_add:core.api.proto.GetInboxSegmentRequest.current_segment_inserted_concern_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& GetInboxSegmentRequest::current_segment_inserted_concern_ids() const {
  // @@protoc_insertion_point(field_list:core.api.proto.GetInboxSegmentRequest.current_segment_inserted_concern_ids)
  return _internal_current_segment_inserted_concern_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* GetInboxSegmentRequest::mutable_current_segment_inserted_concern_ids() {
  // @@protoc_insertion_point(field_mutable_list:core.api.proto.GetInboxSegmentRequest.current_segment_inserted_concern_ids)
  return _internal_mutable_current_segment_inserted_concern_ids();
}

inline ::uint64_t GetInboxSegmentRequest::_internal_current_segment_inserted_concern_ids(int index) const {
  return _impl_.current_segment_inserted_concern_ids_.Get(index);
}
inline void GetInboxSegmentRequest::_internal_add_current_segment_inserted_concern_ids(::uint64_t value) { _impl_.current_segment_inserted_concern_ids_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& GetInboxSegmentRequest::_internal_current_segment_inserted_concern_ids() const {
  return _impl_.current_segment_inserted_concern_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* GetInboxSegmentRequest::_internal_mutable_current_segment_inserted_concern_ids() {
  return &_impl_.current_segment_inserted_concern_ids_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace core


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_inbox_5fservice_2eproto_2epb_2eh
