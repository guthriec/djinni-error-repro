// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concern_service.proto

#include "concern_service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace core {
namespace api {
namespace proto {
PROTOBUF_CONSTEXPR RenderableConcern::RenderableConcern(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.preview_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.url_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.concern_id_)*/ ::uint64_t{0u}
} {}
struct RenderableConcernDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderableConcernDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderableConcernDefaultTypeInternal() {}
  union {
    RenderableConcern _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderableConcernDefaultTypeInternal _RenderableConcern_default_instance_;
PROTOBUF_CONSTEXPR GetConcernRequest::GetConcernRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.concern_id_)*/ ::uint64_t{0u}
} {}
struct GetConcernRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConcernRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConcernRequestDefaultTypeInternal() {}
  union {
    GetConcernRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConcernRequestDefaultTypeInternal _GetConcernRequest_default_instance_;
PROTOBUF_CONSTEXPR GetConcernResponse::GetConcernResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.concern_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0
} {}
struct GetConcernResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConcernResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConcernResponseDefaultTypeInternal() {}
  union {
    GetConcernResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConcernResponseDefaultTypeInternal _GetConcernResponse_default_instance_;
}  // namespace proto
}  // namespace api
}  // namespace core
namespace core {
namespace api {
namespace proto {
bool GetConcernStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    GetConcernStatus_strings[3] = {};

static const char GetConcernStatus_names[] = {
    "GET_CONCERN_STATUS_CONCERN_NOT_FOUND"
    "GET_CONCERN_STATUS_OK"
    "GET_CONCERN_STATUS_UNKNOWN"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GetConcernStatus_entries[] =
    {
        {{&GetConcernStatus_names[0], 36}, 2},
        {{&GetConcernStatus_names[36], 21}, 1},
        {{&GetConcernStatus_names[57], 26}, 0},
};

static const int GetConcernStatus_entries_by_number[] = {
    2,  // 0 -> GET_CONCERN_STATUS_UNKNOWN
    1,  // 1 -> GET_CONCERN_STATUS_OK
    0,  // 2 -> GET_CONCERN_STATUS_CONCERN_NOT_FOUND
};

const std::string& GetConcernStatus_Name(GetConcernStatus value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GetConcernStatus_entries, GetConcernStatus_entries_by_number,
          3, GetConcernStatus_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GetConcernStatus_entries, GetConcernStatus_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : GetConcernStatus_strings[idx].get();
}

bool GetConcernStatus_Parse(absl::string_view name, GetConcernStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GetConcernStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<GetConcernStatus>(int_value);
  }
  return success;
}
// ===================================================================

class RenderableConcern::_Internal {
 public:
  using HasBits = decltype(std::declval<RenderableConcern>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RenderableConcern, _impl_._has_bits_);
  static void set_has_concern_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::core::api::proto::RenderableSource& source(const RenderableConcern* msg);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::core::api::proto::RenderableSource&
RenderableConcern::_Internal::source(const RenderableConcern* msg) {
  return *msg->_impl_.source_;
}
void RenderableConcern::clear_source() {
  if (_impl_.source_ != nullptr) _impl_.source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RenderableConcern::RenderableConcern(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core.api.proto.RenderableConcern)
}
RenderableConcern::RenderableConcern(const RenderableConcern& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RenderableConcern* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.preview_) {}

    , decltype(_impl_.url_) {}

    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.concern_id_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.preview_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.preview_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.preview_.Set(from._internal_preview(), _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.url_.Set(from._internal_url(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.source_ = new ::core::api::proto::RenderableSource(*from._impl_.source_);
  }
  _this->_impl_.concern_id_ = from._impl_.concern_id_;
  // @@protoc_insertion_point(copy_constructor:core.api.proto.RenderableConcern)
}

inline void RenderableConcern::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.preview_) {}

    , decltype(_impl_.url_) {}

    , decltype(_impl_.source_){nullptr}
    , decltype(_impl_.concern_id_) { ::uint64_t{0u} }

  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preview_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.preview_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenderableConcern::~RenderableConcern() {
  // @@protoc_insertion_point(destructor:core.api.proto.RenderableConcern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderableConcern::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.preview_.Destroy();
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_;
}

void RenderableConcern::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderableConcern::Clear() {
// @@protoc_insertion_point(message_clear_start:core.api.proto.RenderableConcern)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.preview_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.source_ != nullptr);
      _impl_.source_->Clear();
    }
  }
  _impl_.concern_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RenderableConcern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 concern_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_concern_id(&has_bits);
          _impl_.concern_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string preview = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_preview();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .core.api.proto.RenderableSource source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RenderableConcern::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.api.proto.RenderableConcern)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 concern_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_concern_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_title();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string preview = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_preview();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string url = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_url();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional .core.api.proto.RenderableSource source = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.api.proto.RenderableConcern)
  return target;
}

::size_t RenderableConcern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.api.proto.RenderableConcern)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_title());
    }

    // optional string preview = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_preview());
    }

    // optional string url = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_url());
    }

    // optional .core.api.proto.RenderableSource source = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.source_);
    }

    // optional uint64 concern_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_concern_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderableConcern::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RenderableConcern*>(
      &from));
}

void RenderableConcern::MergeFrom(const RenderableConcern& from) {
  RenderableConcern* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:core.api.proto.RenderableConcern)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_preview(from._internal_preview());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_source()->::core::api::proto::RenderableSource::MergeFrom(
          from._internal_source());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.concern_id_ = from._impl_.concern_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RenderableConcern::CopyFrom(const RenderableConcern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.api.proto.RenderableConcern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderableConcern::IsInitialized() const {
  return true;
}

void RenderableConcern::InternalSwap(RenderableConcern* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.preview_, lhs_arena,
                                       &other->_impl_.preview_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, lhs_arena,
                                       &other->_impl_.url_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderableConcern, _impl_.concern_id_)
      + sizeof(RenderableConcern::_impl_.concern_id_)
      - PROTOBUF_FIELD_OFFSET(RenderableConcern, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

std::string RenderableConcern::GetTypeName() const {
  return "core.api.proto.RenderableConcern";
}

// ===================================================================

class GetConcernRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetConcernRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetConcernRequest, _impl_._has_bits_);
  static void set_has_concern_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetConcernRequest::GetConcernRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core.api.proto.GetConcernRequest)
}
GetConcernRequest::GetConcernRequest(const GetConcernRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:core.api.proto.GetConcernRequest)
}

inline void GetConcernRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concern_id_) { ::uint64_t{0u} }

  };
}

GetConcernRequest::~GetConcernRequest() {
  // @@protoc_insertion_point(destructor:core.api.proto.GetConcernRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConcernRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetConcernRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConcernRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:core.api.proto.GetConcernRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.concern_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetConcernRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 concern_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_concern_id(&has_bits);
          _impl_.concern_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetConcernRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.api.proto.GetConcernRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 concern_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_concern_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.api.proto.GetConcernRequest)
  return target;
}

::size_t GetConcernRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.api.proto.GetConcernRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 concern_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_concern_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConcernRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetConcernRequest*>(
      &from));
}

void GetConcernRequest::MergeFrom(const GetConcernRequest& from) {
  GetConcernRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:core.api.proto.GetConcernRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_concern_id(from._internal_concern_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetConcernRequest::CopyFrom(const GetConcernRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.api.proto.GetConcernRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConcernRequest::IsInitialized() const {
  return true;
}

void GetConcernRequest::InternalSwap(GetConcernRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.concern_id_, other->_impl_.concern_id_);
}

std::string GetConcernRequest::GetTypeName() const {
  return "core.api.proto.GetConcernRequest";
}

// ===================================================================

class GetConcernResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetConcernResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetConcernResponse, _impl_._has_bits_);
  static const ::core::api::proto::RenderableConcern& concern(const GetConcernResponse* msg);
  static void set_has_concern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::core::api::proto::RenderableConcern&
GetConcernResponse::_Internal::concern(const GetConcernResponse* msg) {
  return *msg->_impl_.concern_;
}
GetConcernResponse::GetConcernResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:core.api.proto.GetConcernResponse)
}
GetConcernResponse::GetConcernResponse(const GetConcernResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetConcernResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concern_){nullptr}
    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.concern_ = new ::core::api::proto::RenderableConcern(*from._impl_.concern_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:core.api.proto.GetConcernResponse)
}

inline void GetConcernResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.concern_){nullptr}
    , decltype(_impl_.status_) { 0 }

  };
}

GetConcernResponse::~GetConcernResponse() {
  // @@protoc_insertion_point(destructor:core.api.proto.GetConcernResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetConcernResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.concern_;
}

void GetConcernResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetConcernResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:core.api.proto.GetConcernResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.concern_ != nullptr);
    _impl_.concern_->Clear();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetConcernResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .core.api.proto.RenderableConcern concern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_concern(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .core.api.proto.GetConcernStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::core::api::proto::GetConcernStatus_IsValid(static_cast<int>(val)))) {
            _internal_set_status(static_cast<::core::api::proto::GetConcernStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetConcernResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:core.api.proto.GetConcernResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .core.api.proto.RenderableConcern concern = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::concern(this),
        _Internal::concern(this).GetCachedSize(), target, stream);
  }

  // optional .core.api.proto.GetConcernStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:core.api.proto.GetConcernResponse)
  return target;
}

::size_t GetConcernResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:core.api.proto.GetConcernResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .core.api.proto.RenderableConcern concern = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.concern_);
    }

    // optional .core.api.proto.GetConcernStatus status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConcernResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetConcernResponse*>(
      &from));
}

void GetConcernResponse::MergeFrom(const GetConcernResponse& from) {
  GetConcernResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:core.api.proto.GetConcernResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_concern()->::core::api::proto::RenderableConcern::MergeFrom(
          from._internal_concern());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetConcernResponse::CopyFrom(const GetConcernResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:core.api.proto.GetConcernResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConcernResponse::IsInitialized() const {
  return true;
}

void GetConcernResponse::InternalSwap(GetConcernResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConcernResponse, _impl_.status_)
      + sizeof(GetConcernResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GetConcernResponse, _impl_.concern_)>(
          reinterpret_cast<char*>(&_impl_.concern_),
          reinterpret_cast<char*>(&other->_impl_.concern_));
}

std::string GetConcernResponse::GetTypeName() const {
  return "core.api.proto.GetConcernResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace api
}  // namespace core
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::core::api::proto::RenderableConcern*
Arena::CreateMaybeMessage< ::core::api::proto::RenderableConcern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::api::proto::RenderableConcern >(arena);
}
template<> PROTOBUF_NOINLINE ::core::api::proto::GetConcernRequest*
Arena::CreateMaybeMessage< ::core::api::proto::GetConcernRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::api::proto::GetConcernRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::core::api::proto::GetConcernResponse*
Arena::CreateMaybeMessage< ::core::api::proto::GetConcernResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::core::api::proto::GetConcernResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
